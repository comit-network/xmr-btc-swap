name: CI

on:
  pull_request:
  push:
    branches:
      - 'staging'
      - 'trying'
      - 'master'

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache ~/.cargo/bin directory
        id: cache-cargo-bin
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          key: ubuntu-rust-${{ hashFiles('rust-toolchain') }}-cargo-bin-directory-v1

      - name: Install tomlfmt
        if: steps.cache-cargo-bin.outputs.cache-hit != 'true'
        run: cargo install cargo-tomlfmt

      - name: Check Cargo.toml formatting
        run: |
          cargo tomlfmt -d -p Cargo.toml
          cargo tomlfmt -d -p monero-harness/Cargo.toml
          cargo tomlfmt -d -p swap/Cargo.toml

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run clippy with default features
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run clippy with all features enabled
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build_test:
    env:
      RUST_TEST_TASKS: 2
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-gnu, x86_64-apple-darwin ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
            skip_tests: true # Most likely do not work due to docker usage, TODO: add feature flag to allow unit tests
    runs-on: ${{ matrix.os }}
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache target directory and cargo registry
        uses: actions/cache@v2
        with:
          path: |
            target
            ~/.cargo/registry
          key: rust-${{ matrix.target }}-target-directory-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('rust-toolchain') }}-v1

      - name: Cargo check release code with default features
        run: cargo check --workspace

      - name: Cargo check all features
        run: cargo check --workspace --all-targets --all-features

      - name: Build tests
        run: cargo build --tests --workspace --all-features

      - name: Run monero-harness tests
        if: matrix.os == 'ubuntu-latest'
        run: cargo test --package monero-harness --all-features

      - name: Run library tests for swap
        run: cargo test --package swap --lib --all-features

      - name: Build binary
        run: |
          cargo build -p swap --target ${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v2-preview
        with:
          name: swap-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/swap

  docker_tests:
    env:
      TARGET: x86_64-unknown-linux-gnu
    strategy:
      matrix:
        test_name: [
            happy_path,
            happy_path_restart_bob_before_comm,
            bob_refunds_using_cancel_and_refund_command,
            bob_refunds_using_cancel_and_refund_command_timelock_not_expired,
            bob_refunds_using_cancel_and_refund_command_timelock_not_expired_force,
        ]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache target directory and cargo registry
        uses: actions/cache@v2
        with:
          path: |
            target
            ~/.cargo/registry
          key: rust-${{ matrix.target }}-target-directory-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('rust-toolchain') }}-v1

      - name: Run test ${{ matrix.test_name }}
        run: cargo test --package swap --all-features --test ${{ matrix.test_name }} ""
        env:
          MONERO_ADDITIONAL_SLEEP_PERIOD: 60000
          RUST_MIN_STACK: 16777216 # 16 MB. Default is 8MB. This is fine as in tests we start 2 programs: Alice and Bob.
